[{"categories":null,"content":"一个技术宅的自留地。本人非IT专业人士，只是个人爱好钻研。 这个网站只是把自己的收获记录下来备忘，也希望能帮助有缘人。 本站记录均为自己搜索实践操作，均非自己原创搜索所得，只是自己加工整理。 如果您也对此感兴趣，我建议你善用google，远离某度。其中原因您一比较即可知道。 如果您对前沿技术感兴趣，一定要用英文搜索，中文的结果往往不正确。 另外，尽可能参照最近的文章也是一个避免犯错的好办法。 最后，要经常备份，切记切记。这方面clonezilla不错。 ","date":"2017-08-20","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["linux"],"content":" 安装完系统后，你还需要安装基本的软件来方便使用。好在linux下软件众多，得益于开放性和自由免费的理念，你有众多选择，总可以选择适合你的。下面便是我目前使用的软件： ","date":"2020-11-01","objectID":"/soft/:0:0","tags":["software"],"title":"我使用的主要软件","uri":"/soft/"},{"categories":["linux"],"content":"备份软件 clonezilla是一款linux下优秀的备份软件，基于debian构建，类似ghost,但比ghost更灵活。自身可以启动，支持多种模式备份，即可以整盘备份，也可以按分区备份。可通过ventoy制作启动USB，放入ISO即可。 ","date":"2020-11-01","objectID":"/soft/:1:0","tags":["software"],"title":"我使用的主要软件","uri":"/soft/"},{"categories":["linux"],"content":"USB启动工具 ventoy是EFI启动模式下制作USB启动盘的工具，与以往不同，它不需要复杂操作，安装后会在USB上建立两个分区，一个用于启动，一个用于放置ISO文件。只需将ISO文件放入特定分区，ventoy会自动识别，加入启动选择。 ","date":"2020-11-01","objectID":"/soft/:2:0","tags":["software"],"title":"我使用的主要软件","uri":"/soft/"},{"categories":["linux"],"content":"终端 我使用的是termite,设置简单，也不用安装很多依赖，支持24位真彩色。在wayland下也可以使用fcitx，alacritty和kitty均无法使用。网上说alacritty可以，但我怎么设置都不行，只好放弃。 termite的设置文件是.config/termite/config [options] #allow_bold = true #audible_bell = false #bold_is_bright = true #cell_height_scale = 1.0 #cell_width_scale = 1.0 #clickable_url = true #dynamic_title = true font = JetBrains Mono NL 12 #fullscreen = true #icon_name = terminal #mouse_autohide = false #scroll_on_output = false #scroll_on_keystroke = true # Length of the scrollback buffer, 0 disabled the scrollback buffer # and setting it to a negative value means \"infinite scrollback\" scrollback_lines = 10000 #search_wrap = true #urgent_on_bell = true #hyperlinks = false # $BROWSER is used by default if set, with xdg-open as a fallback browser = xdg-open # \"system\", \"on\" or \"off\" #cursor_blink = system # \"block\", \"underline\" or \"ibeam\" #cursor_shape = block # Hide links that are no longer [options] #allow_bold = true #audible_bell = false #bold_is_bright = true #cell_height_scale = 1.0 #cell_width_scale = 1.0 #clickable_url = true #dynamic_title = true font = JetBrainsMono Nerd Font Mono 12 #fullscreen = true #icon_name = terminal #mouse_autohide = false #scroll_on_output = false #scroll_on_keystroke = true # Length of the scrollback buffer, 0 disabled the scrollback buffer # and setting it to a negative value means \"infinite scrollback\" scrollback_lines = 10000 #search_wrap = true #urgent_on_bell = true #hyperlinks = false # $BROWSER is used by default if set, with xdg-open as a fallback browser = xdg-open # \"system\", \"on\" or \"off\" #cursor_blink = system # \"block\", \"underline\" or \"ibeam\" #cursor_shape = block # Hide links that are no longerhighlight = #2f2f2f # Colors from color0 to color254 can be set color0 = #3f3f3f color1 = #705050 color2 = #60b48a color3 = #dfaf8f color4 = #506070 color5 = #dc8cc3 color6 = #8cd0d3 color7 = #dcdccc color8 = #709080 color9 = #dca3a3 color10 = #c3bf9f color11 = #f0dfaf color12 = #94bff3 color13 = #ec93d3 color14 = #93e0e3 color15 = #ffffff [hints] #font = Monospace 12 #foreground = #dcdccc #background = #3f3f3f #background = #3f3f3f #active_foreground = #e68080 #active_background = #3f3f3f #padding = 2 #border = #3f3f3f #border_width = 0.5 #roundness = 2.0 # vim: ft=dosini cms=#%s # Dracula theme for termite # https://github.com/dracula/termite # Copyright 2013-present, All rights reserved # Code licensed under the MIT license [colors] # dracula 配色 # special foreground = #f8f8f2 foreground_bold = #f8f8f2 cursor = #f8f8f2 background = rgba(40, 42, 54,0.8) #最后一位是透明度 # black color0 = #000000 color8 = #4d4d4d # red color1 = #ff5555 color9 = #ff6e67 # green color2 = #50fa7b color10 = #5af78e # yellow color3 = #f1fa8c color11 = #f4f99d # blue color4 = #bd93f9 color12 = #caa9fa # magenta color5 = #ff79c6 color13 = #ff92d0 # cyan color6 = #8be9fd color14 = #9aedfe # white color7 = #bfbfbf color15 = #e6e6e6 ","date":"2020-11-01","objectID":"/soft/:3:0","tags":["software"],"title":"我使用的主要软件","uri":"/soft/"},{"categories":["linux"],"content":"shell shell是fish，相比zsh，开箱即用，支持自动补全，历史记录，很是方便。 oh-my-fish是fish功能拓展，curl -L https://get.oh-my.fish | fish一键安装，可配套使用。 技巧 更换缺省shell chsh /usr/bin/fish ","date":"2020-11-01","objectID":"/soft/:4:0","tags":["software"],"title":"我使用的主要软件","uri":"/soft/"},{"categories":["linux"],"content":"文本编辑 使用neovim，功能多，更新快。 插件使用vim-plug管理。 .config/vim/init.vim call plug#begin('~/.local/share/nvim/plugged') Plug 'vim-airline/vim-airline' \" Plug 'scrooloose/nerdtree' Plug 'scrooloose/nerdtree' Plug 'morhetz/gruvbox' Plug 'dracula/vim', { 'as': 'dracula' } call plug#end() \"colorscheme gruvbox colorscheme dracula \" autocmd vimenter * NERDTree \"自动开启Nerdtree let g:NERDTreeWinSize = 25 \"设定 NERDTree 视窗大小 let NERDTreeShowBookmarks=1 \" 开启Nerdtree时自动显示Bookmarks \" 打开vim时如果没有文件自动打开NERDTree \" autocmd vimenter * if !argc()|NERDTree|endif \" 当NERDTree为剩下的唯一窗口时自动关闭 autocmd bufenter * if (winnr(\"$\") == 1 \u0026\u0026 exists(\"b:NERDTree\") \u0026\u0026 b:NERDTree.isTabTree()) | q | endif \" 设置树的显示图标 let g:NERDTreeDirArrowExpandable = '+' let g:NERDTreeDirArrowCollapsible = '-' let NERDTreeIgnore = ['\\.pyc$'] \" 过滤所有.pyc文件不显示 let g:NERDTreeShowLineNumbers=0 \" 是否显示行号 let g:NERDTreeHidden=0 \"不显示隐藏文件 \"\"Making it prettier let NERDTreeMinimalUI = 1 let NERDTreeDirArrows = 1 nnoremap \u003cF3\u003e :NERDTreeToggle\u003cCR\u003e \" 开启/关闭nerdtree快捷键 \" set number set termguicolors set background=dark highlight Normal guibg=NONE ctermbg=None \" autocmd vimenter * NERDTree \"自动开启Nerdtree let g:NERDTreeWinSize = 25 \"设定 NERDTree 视窗大小 let NERDTreeShowBookmarks=1 \" 开启Nerdtree时自动显示Bookmarks \"打开vim时如果没有文件自动打开NERDTree \" autocmd vimenter * if !argc()|NERDTree|endif \"当NERDTree为剩下的唯一窗口时自动关闭 autocmd bufenter * if (winnr(\"$\") == 1 \u0026\u0026 exists(\"b:NERDTree\") \u0026\u0026 b:NERDTree.isTabTree()) | q | endif \" 设置树的显示图标 let g:NERDTreeDirArrowExpandable = '+' let g:NERDTreeDirArrowCollapsible = '-' let NERDTreeIgnore = ['\\.pyc$'] \" 过滤所有.pyc文件不显示 let g:NERDTreeShowLineNumbers=0 \" 是否显示行号 let g:NERDTreeHidden=0 \"不显示隐藏文件 \"\"Making it prettier let NERDTreeMinimalUI = 1 let NERDTreeDirArrows = 1 nnoremap \u003cF3\u003e :NERDTreeToggle\u003cCR\u003e \" 开启/关闭nerdtree快捷键 \" set number set termguicolors set background=dark highlight Normal guibg=NONE ctermbg=None ","date":"2020-11-01","objectID":"/soft/:5:0","tags":["software"],"title":"我使用的主要软件","uri":"/soft/"},{"categories":["linux"],"content":"**软件 v2raya是一款使用网页方便设置的**软件，支持全局代理，支持常用**协议。 ","date":"2020-11-01","objectID":"/soft/:6:0","tags":["software"],"title":"我使用的主要软件","uri":"/soft/"},{"categories":["linux"],"content":"配色 可以为fish，kitty，neovim均安装使用流行的dracula配色，这方面搜索dracula网站即可，说明很详细。 技巧 neovim颜色可按照vim配置说明操作即可。 ","date":"2020-11-01","objectID":"/soft/:7:0","tags":["software"],"title":"我使用的主要软件","uri":"/soft/"},{"categories":["linux"],"content":"私有网盘 filebrowser是一款简单、方便的网盘软件，只需一个文件。 /etc/filebrowser/filebrowser.json \"port\": 7000, \"noAuth\": false, \"baseurl\":\"/\", \"address\": \"204.15.72.113\", \"alternativeReCaptcha\": false, \"reCaptchaKey\": \"\", \"reCaptchaSecret\": \"\", \"database\": \"/etc/filebrowser/filebrowser.db\", \"log\": \"stdout\", \"plugin\": \"\", \"scope\": \".\", \"allowCommands\": true, \"allowEdit\": true, \"allowNew\": true, \"commands\": [ \"wget\" /etc/systemd/system/filebrowser.service [Unit] Description=The filebrowser Process Manager After=network.target [Service] Type=simple ExecStart=/usr/local/bin/filebrowser -c /etc/filebrowser/filebrowser.json ExecStop=/bin/killall filebrowser PrivateTmp=true [Install] WantedBy=multi-user.target ","date":"2020-11-01","objectID":"/soft/:8:0","tags":["software"],"title":"我使用的主要软件","uri":"/soft/"},{"categories":["linux"],"content":"frp内网穿透 我们的宽带一般是没有公网地址的，为了能访问家中的nas服务器，需要安装内网穿透软件frp。 /etc/systemd/system/frps.service [Unit] Description=Frp Server Service After=network.target [Service] Type=simple User=nobody Restart=on-failure RestartSec=5s ExecStart=/usr/bin/frps -c /etc/frps/frps.ini [Install] WantedBy=multi-user.target /etc/frps/frps.ini # [common] is integral section [common] # A literal address or host name for IPv6 must be enclosed # in square brackets, as in \"[::1]:80\", \"[ipv6-host]:http\" or \"[ipv6-host%zone]:80\" bind_addr = 0.0.0.0 bind_port = 5500 # udp port to help make udp hole to penetrate nat #bind_udp_port = # udp port used for kcp protocol, it can be same with 'bind_port' # if not set, kcp is disabled in frps #kcp_bind_port = # specify which address proxy will listen for, default value is same with bind_addr # proxy_bind_addr = 127.0.0.1 # if you want to support virtual host, you must set the http port for listening (optional) # Note: http port and https port can be same with bind_port vhost_http_port = 8080 vhost_https_port = 4433 # response header timeout(seconds) for vhost http server, default is 60s # vhost_http_timeout = 60 # TcpMuxHttpConnectPort specifies the port that the server listens for TCP # HTTP CONNECT requests. If the value is 0, the server will not multiplex TCP # requests on one single port. If it's not - it will listen on this value for # HTTP CONNECT requests. By default, this value is 0. # tcpmux_httpconnect_port = 1337 # set dashboard_addr and dashboard_port to view dashboard of frps # dashboard_addr's default value is same with bind_addr # dashboard is available only if dashboard_port is set dashboard_addr = 0.0.0.0 dashboard_port = 6443 # dashboard user and passwd for basic auth protect, if not set, both default value is admin dashboard_user = leon dashboard_pwd = Gjbyhy@72 # enable_prometheus will export prometheus metrics on {dashboard_addr}:{dashboard_port} in /metrics api. enable_prometheus = true # dashboard assets directory(only for debug mode) # assets_dir = ./static # console or real logFile path like ./frps.log log_file = ./frps.log # trace, debug, info, warn, error log_level = info log_max_days = 3 # disable log colors when log_file is console, default is false disable_log_color = false # DetailedErrorsToClient defines whether to send the specific error (with debug info) to frpc. By default, this value is true. detailed_errors_to_client = true # AuthenticationMethod specifies what authentication method to use authenticate frpc with frps. # If \"token\" is specified - token will be read into login message. # If \"oidc\" is specified - OIDC (Open ID Connect) token will be issued using OIDC settings. By default, this value is \"token\". authentication_method = token # AuthenticateHeartBeats specifies whether to include authentication token in heartbeats sent to frps. By default, this value is false. authenticate_heartbeats = false # AuthenticateNewWorkConns specifies whether to include authentication token in new work connections sent to frps. By default, this value is false. authenticate_new_work_conns = false # auth token token = tiantian.cool # OidcClientId specifies the client ID to use to get a token in OIDC authentication if AuthenticationMethod == \"oidc\". # By default, this value is \"\". oidc_client_id = # OidcClientSecret specifies the client secret to use to get a token in OIDC authentication if AuthenticationMethod == \"oidc\". # By default, this value is \"\". oidc_client_secret = # OidcAudience specifies the audience of the token in OIDC authentication if AuthenticationMethod == \"oidc\". By default, this value is \"\". oidc_audience = OidcTokenEndpointUrl specifies the URL which implements OIDC Token Endpoint. # It will be used to get an OIDC token if AuthenticationMethod == \"oidc\". By default, this value is \"\". oidc_token_endpoint_url = # heartbeat configure, it's not recommended to modify the default value # the default value of heartbeat_timeout is 90 # heartbeat_timeout = 90 # only allow frpc to bind ports ","date":"2020-11-01","objectID":"/soft/:9:0","tags":["software"],"title":"我使用的主要软件","uri":"/soft/"},{"categories":["linux"],"content":"中文输入法 使用fcitx，在.pam_environmentv中设置。 GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx MODIFIERS=\"@im=fcitx\" ","date":"2020-11-01","objectID":"/soft/:10:0","tags":["software"],"title":"我使用的主要软件","uri":"/soft/"},{"categories":["linux"],"content":" HP gen8时微型4盘位的服务器，比较适合做NAS。自己也海淘了一台，升级了CPU(1265v2)和内存(16M)，安装了Proxmox虚拟机，虚拟机内安装了windows server 2019,synology,centos 7,还是很稳定的。 ","date":"2020-11-01","objectID":"/gen8-1/:0:0","tags":["vps","gen8"],"title":"HP Gen8设置","uri":"/gen8-1/"},{"categories":["linux"],"content":"ilo静态ip地址设置 ilo是gen8的特色，方便服务器远程管理，无需连接显示器核键盘。使用自动获取ip，每次连接很不方便，可以为设置静态地址方便连接。目前我安装的ilo版本是2.75，支持使用html5远程控制管理，比较方便。 ","date":"2020-11-01","objectID":"/gen8-1/:1:0","tags":["vps","gen8"],"title":"HP Gen8设置","uri":"/gen8-1/"},{"categories":["linux"],"content":"启动设置 常规可以在启动时按F9进入ilo设置界面内设置。 ","date":"2020-11-01","objectID":"/gen8-1/:1:1","tags":["vps","gen8"],"title":"HP Gen8设置","uri":"/gen8-1/"},{"categories":["linux"],"content":"linux内设置 如你的机器上已安装linux，也可用过ipmitool设置。ipmi是ibm发起的一个服务器设置协议，可以通过命令界面进行服务器的一些原需在BIOS中进行的一些设置。 首先查找网卡位置 for i in `seq 1 14`; do ipmitool lan print $i 2\u003e/dev/null | grep -q ^Set \u0026\u0026 echo Channel $i; done Channel 2 查看现有设置 ipmitool lan print 2 Set in Progress : Set Complete Auth Type Support : IP Address Source : DHCP Address IP Address : 0.0.0.0 Subnet Mask : 0.0.0.0 MAC Address : c0:ff:ee:c0:ff:ee BMC ARP Control : ARP Responses Enabled, Gratuitous ARP Disabled Default Gateway IP : 0.0.0.0 802.1q VLAN ID : Disabled 802.1q VLAN Priority : 0 Cipher Suite Priv Max : Not Available 设置静态网址 ipmitool lan set 2 ipsrc static ipmitool lan set 2 ipaddr 192.168.50.36 ipmitool lan set 2 netmask 255.255.255.0 ipmitool lan set 2 defgw ipaddr 192.168.50.1 ipmitool mc reset cold ","date":"2020-11-01","objectID":"/gen8-1/:1:2","tags":["vps","gen8"],"title":"HP Gen8设置","uri":"/gen8-1/"},{"categories":["linux"],"content":"升级BIOS HP gen8的很多设着都可以在ilo下操作，升级BIOS也可以在ilo固件下进行，直接上传BIOS镜像即可，我使用的是2019年4月4日的。当然也可以制作usb来升级，不过没有ilo方便。另外gen8为了安全期间，有两个BIOS，一个备份，一个使用，正常升级只升级备份，没有问题的话，需要我们在BIOS手动交换来永久使用。 具体操作可上网搜索。 ","date":"2020-11-01","objectID":"/gen8-1/:2:0","tags":["vps","gen8"],"title":"HP Gen8设置","uri":"/gen8-1/"},{"categories":["linux"],"content":"使用SPP升级系统 HP gen8可定期通过SPP升级系统，不过HP网站过质保期后就无法下载，我们可以搜索热心网友分享的下载。 技巧 最新SPP下载地址：https://technet24.ir/%D8%AF%D8%A7%D9%86%D9%84%D9%88%D8%AF-%D8%B3%D8%B1%D9%88%DB%8C%D8%B3-%D9%BE%DA%A9-hpe-service-pack-for-proliant-9872 远程在ilo界面左上角选择CDROM图标挂载SPPiso镜像 重新启动按F1选择CD-ROM启动。 选择第一项自动安装，否则升级可能会出现问题。 ","date":"2020-11-01","objectID":"/gen8-1/:3:0","tags":["vps","gen8"],"title":"HP Gen8设置","uri":"/gen8-1/"},{"categories":["linux"],"content":"proxmox proxmox 是一款免费虚拟机软件，基于debian，使用qemu，lxc虚拟化。提供专门的管理页面（端口8006）来建立管理虚拟机，支持集群，功能强大，我仅使用了它最基础的功能。 技巧 安装很简单，使用ilo远程服务台挂载安装ISO，选择CDROM启动即可。proxmox占用空间很小，可直接安装到gen8内置的SD或USB盘上，可以省去一个硬盘接口。 选择网卡时，一定要选择好，否则启动后无法连接控制台，解决也很简单，交换网线口即可。 ","date":"2020-11-01","objectID":"/gen8-1/:4:0","tags":["vps","gen8"],"title":"HP Gen8设置","uri":"/gen8-1/"},{"categories":["linux"],"content":"synology 群辉是比较常用的NAS它的软件是基于linux开发，功能强大，使用模块化管理，拓展性强，稳定性高。我安装了一个它的破解后的虚拟机，主要用作NAS和照片管理。 最新资源在xpenology上可以找到。 ","date":"2020-11-01","objectID":"/gen8-1/:5:0","tags":["vps","gen8"],"title":"HP Gen8设置","uri":"/gen8-1/"},{"categories":["linux"],"content":"软路由 常见的pc软路由软件有openwart，ros，voxy，其中lede是基于openwrt整合了较多功能，我们一般使用lead即可。ros是收费商业软件，稳定性和性能据说不错，不过无法拓展功能。voxy也是开源软件，但也无法拓展。lede编译比较复杂，依赖很多，我们可以使用现成的docker来编译，方便很多。 ","date":"2020-11-01","objectID":"/gen8-1/:6:0","tags":["vps","gen8"],"title":"HP Gen8设置","uri":"/gen8-1/"},{"categories":["linux"],"content":" 根据维基百科，Wayland是一个通信协议，规定了显示服务器与其客户机之间的通信方式，而使用这个协议的显示服务器称为Wayland Compositor。是不是很不好理解，我们只需知道它可以代替xorg就可以了。sway是wayland上的Title Compositor，类似于xorg下的i3，设置基本相同，使用快捷键来操作。以下设置主要参考archlinux wiki。 wayland和sway安装 安装 sudo pacman -S wayland sway xorg-server-xwayland 设置环境变量 与 Xorg不同，wayland 使用.pam_environment设置环境变量。 XDG_CURRENT_DESKTOP=Unity //桌面环境 LANG=zh_CN.UTF-8 //语言设置 INPUT_METHOD DEFAULT=fcitx //fcitx设置 GTK_IM_MODULE DEFAULT=fcitx QT_IM_MODULE DEFAULT=fcitx XMODIFIERS DEFAULT=\\@im=fcitx GDK_DPI_SCALE=1.65 //hidpi 设置 sway 设置 终端设置 set $term kitty bemenu 设置 wayland使用bemenu快速启动程序 set $menu dmenu_path | dmenu | xargs swaymsg exec bemenu -b 护眼程序redshift exec \"kitty -e nohup redshift 2\u003e\u00261 输出背景和分辨率 output eDP-1 { background ~/Downloads/2.jpg fill resolution 1920x1080 } 屏保 exec swayidle -w \\ timeout 300 'swaylock -f -c 000000' \\ timeout 600 'swaymsg \"output * dpms off\"' resume 'swaymsg \"output * dpm s on\"' \\ before-sleep 'swaylock -f -c 000000' 程序快捷键绑定 bindsym $mod+d exec \"wofi --show run\" bindsym $mod+Shift+f exec \"kitty -e ranger\" 缺省颜色 set $bgcolor #00000033 set $ibgcolor #4c7899 set $fws #00000080 set $barcolor #0000000D set $textcolor #ffffff set $itextcolor #969696 set $ubgcolor #ff0000 # border backgroud text indicate client.focused $bgcolor $bgcolor $textcolor $bgcolor client.unfocused $ibgcolor $ibgcolor $itextcolor $ibgcolor client.focused_inactive $ibgcolor $ibgcolor $itextcolor $ibgcolor client.urgent $ubgcolor $ubgcolor $textcolor $ubgcolor i3status 状态栏 bar { position top font xft:Font Awesome 5 16 # When the status_command prints a new line to stdout, swaybar updates. # The default just shows the current date and time. # status_command waybar -c ~/.config/waybar/config # status_command while ~/.config/sway/sway_bar.sh; do sleep 1; done # status_command while date +'%Y-%m-%d %l:%M:%S %p'; do sleep 1; done status_command i3status -c ~/.config/i3status/i3status.conf colors { background $barcolor separator $barcolor focused_workspace $fws $fws $textcolor active_workspace $bgcolor $bgcolor $textcolor inactive_workspace $ibgcolor $ibgcolor $itextcolor } } 声音背光调节快捷键 bindsym XF86AudioRaiseVolume exec amixer -D pulse sset Master 2%+ #increase sound volume bindsym XF86AudioLowerVolume exec amixer -D pulse sset Master 2%- #decrease sound volume bindsym XF86AudioMute exec amixer -D pulse sset Master toggle # mute sound bindsym XF86MonBrightnessUp exec brightnessctl -c backlight s 5%+ bindsym XF86MonBrightnessDown exec brightnessctl -c backlight set 5%- 注意 先安装brighjtnessctl用于背光调节。 窗口间隙 gaps inner 5 gaps outer 5 smart_gaps on 指定特定程序窗口 bindsym $mod+x exec google-chrome-stable for_window [instance=google-chrome] move container to workspace number 2 for_window [instance=google-chrome] 设置关机锁屏等快捷键 set $Locker \"swaylock -f -c 000000\" set $mode_system System (l) lock, (s) suspend, (h) hibernate, (r) reboot, (Shift +s) shutdown mode \"$mode_system\" { bindsym l exec --no-startup-id $Locker # bindsym e exec --no-startup-id i3-msg exit, mode \"default\" bindsym s exec --no-startup-id $Locker \u0026\u0026 systemctl suspend, mode \"default\" bindsym h exec --no-startup-id $Locker \u0026\u0026 systemctl hibernate, mode \"default \" bindsym r exec --no-startup-id systemctl reboot, mode \"default\" bindsym Shift+s exec --no-startup-id systemctl poweroff -i, mode \"default\" # back to normal: Enter or Escape bindsym Return mode \"default\" bindsym Escape mode \"default\" } bindsym $mod+Shift+q mode \"$mode_system\"a 设置边框大小 default_border pixel 1 设置键盘 参照github设置 input * { xkb_layout \"us\" xkb_variant \"\" xkb_options \"\" } input \u003cidentifier\u003e xkb_model \"x1carbon\" 全屏取消锁屏 for_window [instance=google-chrome] inhibit_idle fullscreen 正确显示fcitx键盘图标 查看图标： find /usr/share/icons/ -name 'input-keyboard.*' bar设置主题： icon_theme Adwaita ","date":"2020-10-29","objectID":"/wayland/:0:0","tags":["arch","wayland"],"title":"Archlinux使用Wayland和sway","uri":"/wayland/"},{"categories":["linux"],"content":" hugo是快速的静态博客系统，可部署于github。我选择的是LoveIt主题,当然even也是很好的主题，但更适合文字博客，偏技术类博客loveit更现代，更适合。loveit功能很全，评论，搜索简单设置开箱即用，比较方便，设置文档也比较丰富。 ","date":"2020-10-29","objectID":"/hugo/:0:0","tags":["vps"],"title":"VPS配置之六hugo","uri":"/hugo/"},{"categories":["linux"],"content":"安装hugo archlinux下安装hugo非常简单，只需一条命令，一个文件。 sudo pacman -S hugo ","date":"2020-10-29","objectID":"/hugo/:1:0","tags":["vps"],"title":"VPS配置之六hugo","uri":"/hugo/"},{"categories":["linux"],"content":"配置hugo 建立博客 使用hugo建立名为blog的本地博客。 hugo new site blog 选择主题并编辑config 进入blog目录，初始化git，下载主题，可以使用github的submodule功能添加你喜欢的主题。下面以LoveIt主题为例，一般主题设置可以copy主题目录内 examplesite内内容到blog下使用。比较重要的是config.coml内设置。 cd blog git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 新建文章并编译 不同主题要求的位置不同，需要注意，这点可以参照主题说明。 hugo new posts/\u003c文章名\u003e.md hugo 本地测试 hugo serve --buildDrafts ","date":"2020-10-29","objectID":"/hugo/:2:0","tags":["vps"],"title":"VPS配置之六hugo","uri":"/hugo/"},{"categories":["linux"],"content":"使用gihub管理blog和文章 我们需要建立两个repo，分别用于文章管理和博客发布。其中博客发布我使用的是建立\u003c用户名\u003e.github.io，相对比较简单。 cd publc git init git remote add \u003c用于发布的repo地址\u003e git -u orgin push rm -rf public git submodule add \u003c用于发布的repo地址\u003e public 在blog根目录下建立depoly.sh。 #!/bin/sh # If a command fails then the deploy stops set -e # Print out commands before executing them set -x printf \"\\033[0;32mDeploying updates to GitHub...\\033[ 0m\\n\" # Build the project. hugo # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\"rebuilding site $(date)\" if [ -n \"$*\" ]; then msg=\"$*\" fi git commit -m \"$# Push source and build repos. git push origin master # Back to the origin folder # cd .. # rm -rf public blog目录下submodudle初始化 git submodule init 至此设置基本完成，如需上传文章需在blog下执行： git add . git commit \"\" git push -u origin master 如需更新博客，需提前为的deploy.sh增加可运行属性： chmod +x deploy.sh ./deploy.sh ","date":"2020-10-29","objectID":"/hugo/:3:0","tags":["vps"],"title":"VPS配置之六hugo","uri":"/hugo/"},{"categories":["linux"],"content":"LoveIt设置 编辑config.coml, 设置baseURL中文显示 baseURL = \"https://gihub博客repo/\" defaultContentLanguage = \"zh-cn\" 设置header.title logo = \"/images/kiss-wink-heart-regular.svg 此svg可从awesome font网站下载放入images目录。 ","date":"2020-10-29","objectID":"/hugo/:4:0","tags":["vps"],"title":"VPS配置之六hugo","uri":"/hugo/"},{"categories":["linux"],"content":"其他机器使用 git clone \u003c文章管理repo\u003e blog cd blog git submodule init git submodule update cd public git checkout master cd .. cd themes/LoveIt git checkout master ","date":"2020-10-29","objectID":"/hugo/:5:0","tags":["vps"],"title":"VPS配置之六hugo","uri":"/hugo/"},{"categories":["linux"],"content":"配置自己域名 设置域名CNAME 在域名管理页面设置域名CNAME指向你的博客eopo。 设置博客repo 在博客仓库设置页面custom domain处填入你的域名，可勾选下面enforce HTTPS。 ","date":"2020-10-29","objectID":"/hugo/:6:0","tags":["vps"],"title":"VPS配置之六hugo","uri":"/hugo/"},{"categories":["linux"],"content":" 为便于VPS管理设置，我们需要开启SSH，安全起见，SSH需要在/etc/ssh/sshd_config中进行以下设置。 ","date":"2020-10-27","objectID":"/ssh/:0:0","tags":["vps"],"title":"VPS配置之五SSH","uri":"/ssh/"},{"categories":["linux"],"content":"在服务器端设置 禁止root用户登录，找到PermitRootLogin yes改为no 禁止密码登录，找到PasswordAuthentication yes，改为no。 改变缺省端口，找到Port 22改为其他端口 ","date":"2020-10-27","objectID":"/ssh/:1:0","tags":["vps"],"title":"VPS配置之五SSH","uri":"/ssh/"},{"categories":["linux"],"content":"在客户端设置 使用ssh-keygen生成key 默认保存于.ssh目录中,id_rsa 为私钥，id_rsa.pub 为公钥。。 ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/home/p3terx/.ssh/id_rsa): Created directory '/home/p3terx/.ssh'. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/p3terx/.ssh/id_rsa. Your public key has been saved in /home/p3terx/.ssh/id_rsa.pub. The key fingerprint is: SHA256:qssp3ZnX0bgxbSUOlecZllcDAjX4nqjL3hA/HRtoGd8 p3terx@hk2 The key's randomart image is: +---[RSA 2048]----+ | .++ o.oo| | . = = o| | ... + + | | *.o + | | .S+oX.E | | .+.*oO | | . ..+.+ O | | ...o=.+ + | | .=..=.. | +----[SHA256]-----+ 使用ssh-copy-id上传公钥 ssh-copy-id -i ~/.ssh/id_rsa.pub -p Port User@HostName 注意 ssh-copy-id 命令相当于执行了以下复杂的手动操作： 复制公钥文件中的内容 cat ~/.ssh/id_rsa.pub 登录到远程主机 ssh User@HostName -p Port 创建 ~/.ssh 目录 mkdir -p ~/.ssh 把公钥文件写入到 ~/.ssh/authorized_keys vim ~/.ssh/authorized_keys 设置权限 chmod 700 ~/.ssh chmod 600 ~/.ssh/authorized_keys 使用ssh-key登录 ssh -p Port User@HostName ","date":"2020-10-27","objectID":"/ssh/:2:0","tags":["vps"],"title":"VPS配置之五SSH","uri":"/ssh/"},{"categories":["linux"],"content":" nginx是常用服务器软件之一，高效，快速。我们的VPS需要它来建立网站、通过反向代理使用各种服务。从稳定性考虑，我的VPS使用Centos 7操作系统，网上资源也很丰富，便于搜索学习。 安装nginx 安装EPEL仓库 sudo yum install epel-release 安装nginx sudo yum install nginx 启动nginx sudo systemctl start nginx sudo systemctl enable nginx 设置防火墙 sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=https sudo firewall-cmd --reload 设置nginx 查看nginx设置位置。sudo nginx -t v2raya server { listen 80; #listen [::]:80; server_name 你的网站地址; index index.html index.htm index.php default.html default.htm default.php; root /home/wwwroot/你的网站地址; include rewrite/other.conf; #error_page 404 /404.html; # Deny access to PHP files in specific directory #location ~ /(wp-content|uploads|wp-includes|images)/.*\\.php$ { deny all; } include enable-php-pathinfo.conf; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ { expires 30d; } location ~ .*\\.(js|css)?$ { expires 12h; } location ~ /.well-known { allow all; } location ~ /\\. { deny all; } access_log /home/wwwlogs/你的网站地址.log; } filebrowser反向代理 resolver 8.8.8.8; upstream filebrowser { server 你的网站IP:7000; } server { listen 80 default_server; server_name 你的网站地址; location / { client_max_body_size 1024m; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forward-For $proxy_add_x_forwarded_for; proxy_pass http://filebrowser; } } frps反向代理 server { listen 80; server_name *.yourdomain.com; return 301 https://$host$request_uri; } server { listen 443 ssl http2; server_name *.yourdomain.com; ssl_certificate /usr/local/nginx/conf/ssl/yourdomain.com.crt; ssl_certificate_key /usr/local/nginx/conf/ssl/yourdomain.com.key; client_max_body_size 50m; client_body_buffer_size 256k; client_header_timeout 3m; client_body_timeout 3m; send_timeout 3m; proxy_connect_timeout 300s; proxy_read_timeout 300s; proxy_send_timeout 300s; proxy_buffer_size 64k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; proxy_ignore_client_abort on; location / { proxy_pass http://127.0.0.1:1234; //frps vhost port proxy_redirect off; proxy_set_header Host $host:80; proxy_ssl_server_name on; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } ","date":"2020-10-27","objectID":"/nginx/:0:0","tags":["vps"],"title":"VPS配置之二Nginx","uri":"/nginx/"},{"categories":["linux"],"content":" Acme.sh能做什么？ acme.sh可以从 let‘s encrypt（数字证书认证机构）生成免费的证书。并且可以自动化完成创建证书、安装证书、更新证书的流程。 一、安装acme.sh curl https://get.acme.sh | sh 创建一个bash的别名, 方便使用: alias acme.sh=~/.acme.sh/acme.sh 二、生成证书 生成证书需要验证你的域名所有权。acme.sh 实现了 acme 协议支持的所有验证协议，一般有 http 和 dns 两种验证方式。 这里介绍几种常用的验证方式。 ","date":"2020-10-25","objectID":"/acme/:0:0","tags":["acme","vps"],"title":"VPS配置之一acme证书申请","uri":"/acme/"},{"categories":["linux"],"content":"1.Webroot mode: 如果已经运行了web服务器，可以指定网站的根目录使用 Webroot 模式生成证书。acme.sh 会自动的生成验证文件, 并放到网站的根目录, 然后自动完成验证. 最后会自行删除验证文件。 acme.sh --issue -d example.com -w /home/wwwroot/example.com ","date":"2020-10-25","objectID":"/acme/:1:0","tags":["acme","vps"],"title":"VPS配置之一acme证书申请","uri":"/acme/"},{"categories":["linux"],"content":"2.Standalone mode: 如果没有Web服务器，且80端口是空闲的，可以使用独立模式。acme.sh会用内置的独立网络服务器，监听80端口进行验证以颁发证书。 acme.sh --issue -d example.com --standalone ","date":"2020-10-25","objectID":"/acme/:2:0","tags":["acme","vps"],"title":"VPS配置之一acme证书申请","uri":"/acme/"},{"categories":["linux"],"content":"4.Nginx mode: 如果使用 nginx 服务器可以自动从 nginx 配置中完成验证。 acme.sh --issue -d example.com --nginx 三、安装证书 生成的证书默认放在 acme.sh 的安装目录下，不应该直接使用该目录下的文件，因为这里面的文件都是内部使用, 而且目录结构可能会发生变化。 可以使用 –install-cert 命令安装证书，把证书copy到相应的位置。 比如 nginx: acme.sh --install-cert -d example.com \\ --key-file /path/to/keyfile/in/nginx/cert.key \\ --fullchain-file /path/to/fullchain/nginx/cert.pem \\ --reloadcmd \"service nginx force-reload\" 跟上的 –reloadcmd 命令，是指定重新加载服务器的命令，证书安装成功或自动更新之后会重新加载服务使新证书生效。 四、更新证书 目前通过 acme.sh 生成的证书会在60天过期，那怎么更新证书呢？ ","date":"2020-10-25","objectID":"/acme/:3:0","tags":["acme","vps"],"title":"VPS配置之一acme证书申请","uri":"/acme/"},{"categories":["linux"],"content":"1.手动更新 acme.sh --renew -d example.com --force ","date":"2020-10-25","objectID":"/acme/:4:0","tags":["acme","vps"],"title":"VPS配置之一acme证书申请","uri":"/acme/"},{"categories":["linux"],"content":"2.自动更新 安装 acme.sh 时会自动创建一个 cronjob，每天定期检查所有证书，如果证书需要更新会自动更新证书。 通过 crontab -l 查看 crontab 任务: 46 0 * * * \"/root/.acme.sh\"/acme.sh --cron --home \"/root/.acme.sh\" \u003e /dev/null 五、更新acme.sh 由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步。 acme.sh --upgrade 保持自动升级。 acme.sh --upgrade --auto-upgrade ","date":"2020-10-25","objectID":"/acme/:5:0","tags":["acme","vps"],"title":"VPS配置之一acme证书申请","uri":"/acme/"},{"categories":["linux"],"content":" archlinux 安装配置的文章网上很多，大多涉及源设置，输入法，字体美化，终端设置等等，但仍有很多细节缺失，为此将自己完善Thinkpad X1 carbon 7th 的过程简要记录备忘。 ","date":"2020-10-22","objectID":"/arch-2/:0:0","tags":["archlinux"],"title":"Archlinux 优化之二","uri":"/arch-2/"},{"categories":["linux"],"content":"BIOS 设置 禁止 “Secure Boot” Security -\u003e Secure Boot - Set to “Disabled”. 节能 禁止 Config -\u003e Thunderbolt BIOS Assist Mode - Set to “Enabled” 休眠模式 Config -\u003e Power -\u003e Sleep State 引用自archlinux wiki ","date":"2020-10-22","objectID":"/arch-2/:1:0","tags":["archlinux"],"title":"Archlinux 优化之二","uri":"/arch-2/"},{"categories":["linux"],"content":"安装网卡驱动 broadcom-wl-dkms，每次升级内核后，都自动安装。 ","date":"2020-10-22","objectID":"/arch-2/:2:0","tags":["archlinux"],"title":"Archlinux 优化之二","uri":"/arch-2/"},{"categories":["linux"],"content":"音质提升 ~/.config/pulse/daemon.conf default-sample-format = float32le default-sample-rate = 48000 alternate-sample-rate = 44100 default-sample-channels = 4 default-channel-map = front-left,front-right,rear-left,rear-right resample-method = soxr-vhq enable-lfe-remixing = no high-priority = yes nice-level = -11 realtime-scheduling = yes realtime-priority = 9 rlimit-rtprio = 9 daemonize = no ~/.asoundrc pcm!default { type plug slave.pcm hw } ","date":"2020-10-22","objectID":"/arch-2/:3:0","tags":["archlinux"],"title":"Archlinux 优化之二","uri":"/arch-2/"},{"categories":["linux"],"content":"护眼程序 安装redshift 编辑 systemd 文件，加入自启动 ","date":"2020-10-22","objectID":"/arch-2/:4:0","tags":["archlinux"],"title":"Archlinux 优化之二","uri":"/arch-2/"},{"categories":["linux"],"content":"SSD开启trim sudo systemctl enable fstrim.timer sudo systemctl start fstrim.service ","date":"2020-10-22","objectID":"/arch-2/:5:0","tags":["archlinux"],"title":"Archlinux 优化之二","uri":"/arch-2/"},{"categories":["linux"],"content":"升级固件版本 fwupd fwupdmgr update ","date":"2020-10-22","objectID":"/arch-2/:6:0","tags":["archlinux"],"title":"Archlinux 优化之二","uri":"/arch-2/"},{"categories":["linux"],"content":"BOSS Q35 蓝牙连接 编辑 vim /etc/bluetooth/main.conf ，将 # ControllerMode = dual改为ControllerMode = bredr，重启bluetooth服务。 音质提升 pacmd set-card-profile 1 a2dp_sink ","date":"2020-10-22","objectID":"/arch-2/:7:0","tags":["archlinux"],"title":"Archlinux 优化之二","uri":"/arch-2/"},{"categories":["linux"],"content":"dock * 安装plank，将状态栏放于顶部 ","date":"2020-10-22","objectID":"/arch-2/:8:0","tags":["archlinux"],"title":"Archlinux 优化之二","uri":"/arch-2/"},{"categories":["linux"],"content":"全局菜单 * vala-appmenu ","date":"2020-10-22","objectID":"/arch-2/:9:0","tags":["archlinux"],"title":"Archlinux 优化之二","uri":"/arch-2/"},{"categories":["linux"],"content":" archliux是一个滚动更新的linux发行版，它有庞大软件库和最新的系统，适合尝鲜使用.事实上你只要经常更新，它也是比较稳定的。我曾使用过manjaro，安装确实省事。但你无法完全控制，不适用我这样追求完美注意的人，gentoo又似乎太麻烦，为了那一点性能提高，好像也划不来。所以我还是使用archlinux，定制性强又不失快速。自从使用EFI STUB启动后，BiOS自检完，进入登录画面只需1秒多，可以说是飞速。使用wayland加sway和xammod内核进入系统内存占用不到300M，我已经满意了。 bcm 4360 网卡驱动 archlinux 安装需联网。broadcom 4360 网卡需手动安装驱动，是安装前首先要做的。archlinux安装盘自带bcm4360驱动,不过缺省使用的b43quds，我们需要卸载后，加载wl驱动。 rmmod b43 ssb rmmod bcma modprober wl rmmod wl modprober wl ip link iwctl station wlan0 get-networks station wlan0 connect ** 技巧 如果加载wl模块后，仍无法找到无线网卡，可卸载重新加载一次 pgp密钥导入 部分yay软件需要pgp密钥，使用代理添加。 proxychains gpg --keyserver keyserver.ubuntu.com --recv-keys ** 临时增加 tmp大小 编译xanmod需要 sudo mount -o remount,size=6G,noatime /tmp timeshift恢复 使用timeshift可随时给系统做快照，实现增量备份。 sudo timeshift --list sudo timeshift --snapshot-device /dev/sdb4 sudo timeshift --restore --snapshot '2019-07-16_16-35-42' --skip-grub 注意 若无法进入系统，可使用manjaro安装盘启动，在终端中sudo timeshift，选择快照的恢复。 加快启动速度 关闭 watchdog 安装 xanmod 内核 优化桌面反应速度，启动速度，减少内存占用。 yay -S linux-xanmod linux-xanmod-header grub-mkconfig -o /boot/grub/grub.cfg EFI STUB 启动 可使用EFI STUB加快启动速度。 注意 若使用EFI STUB, 安装时需将EFI安装到boot分区。请将part换为自己的BOOT分区，将UUID改为自己BOOT分区。 sudo efibootmgr --disk /dev/nvme0n1 --part 1 --create --label \"Arch\" --loader /vmlinuz-linux-xanmod --unicode 'root=UUID=0f949b62-98bf-4787-b8b9-1f21d0889691 rw initrd=\\initramfs-linux-xanmod.img loglevel=3 quiet nowatchdog' 清理 清理孤立包 sudo pacman -Rns $(pacman -Qtdq) 清理日志 journalctl --vacum-size=50M 清理缓冲 sudo pacman -Scc ","date":"2020-10-22","objectID":"/arch-1/:0:0","tags":["archlinux"],"title":"Archlinux 优化之一","uri":"/arch-1/"}]